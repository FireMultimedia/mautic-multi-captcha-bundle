{#
Varables
  - field
  - formName (optional, string)
  - fieldPage
  - contactFields
  - companyFields
  - inBuilder
  - fields
  - inForm (optional, bool)
  - required (optional, bool)
#}
{% set defaultInputClass = 'text' %}
{% set containerType = 'div-wrapper' %}

{# start: field_helper #}
{% set defaultInputFormClass = defaultInputFormClass|default('') %}
{% set defaultLabelClass = defaultLabelClass|default('label') %}
{% set formName = formName|default('') %}
{% set defaultInputClass = 'mauticform-' ~ defaultInputClass %}
{% set defaultLabelClass = 'mauticform-' ~ defaultLabelClass %}
{% set containerClass = containerClass|default(containerType) %}
{% set order = field.order|default(0) %}
{% set validationMessage = '' %}

{% set inputAttributes = htmlAttributesStringToArray(field.inputAttributes|default('')) %}
{% set labelAttributes = htmlAttributesStringToArray(field.labelAttributes|default('')) %}
{% set containerAttributes = htmlAttributesStringToArray(field.containerAttributes|default('')) %}

{% if ignoreName is not defined or (ignoreName is defined and ignoreName is empty) %}
    {% set inputName = 'mauticform[' ~ field.alias ~ ']' %}
    {% if field.properties.multiple is defined %}
        {% set inputName = inputName ~ '[]' %}
    {% endif %}
    {% set inputAttributes = inputAttributes|merge({
        'name': inputName,
    }) %}
{% endif %}

{% if field.type not in ['checkboxgrp', 'radiogrp', 'textarea'] %}
    {% set inputAttributes = inputAttributes|merge({
        'value': field.defaultValue|default(''),
    }) %}
{% endif %}

{% if ignoreId is not defined or (ignoreId is defined and ignoreId is empty) %}
    {% set inputAttributes = inputAttributes|merge({
        'id': 'mauticform_input' ~ formName ~ '_' ~ field.alias,
    }) %}
    {% set labelAttributes = labelAttributes|merge({
        'id': 'mauticform_label' ~ formName ~ '_' ~ field.alias,
        'for': 'mauticform_input' ~ formName ~ '_' ~ field.alias,
    }) %}
{% endif %}

{% if field.properties.placeholder is defined and field.properties.placeholder is not empty %}
    {% set inputAttributes = inputAttributes|merge({
        'placeholder': field.properties.placeholder,
    }) %}
{% endif %}


{# Label and input #}
{% if inForm is defined and (true == inForm or inForm is not empty) %}
    {% if field.type in ['button', 'pagebreak'] %}
        {% set defaultInputFormClass = defaultInputFormClass ~ ' btn btn-ghost' %}
    {% endif %}

    {% set labelAttributes = labelAttributes|merge({
        'class': labelAttributes.class|default([])|merge([defaultLabelClass]),
    }) %}
    {% set inputAttributes = inputAttributes|merge({
        'disabled': 'disabled',
        'class': inputAttributes.class|default([])|merge([defaultInputClass, defaultInputFormClass]),
    }) %}
{% else %}
    {% set labelAttributes = labelAttributes|merge({
        'class': labelAttributes.class|default([])|merge([defaultLabelClass]),
    }) %}
    {% set inputAttributes = inputAttributes|merge({
        'class': inputAttributes.class|default([])|merge([defaultInputClass]),
    }) %}
{% endif %}

{# Container #}
{% set containerAttributes = containerAttributes|merge({
    'id': 'mauticform' ~ formName|default('') ~ '_' ~ id,
    'class': containerAttributes.class|default([])|merge([
        'mauticform-row',
        'mauticform-' ~ containerClass,
        'mauticform-field-' ~ order,
    ]),
}) %}
{% if field.parent and fields[field.parent] is defined %}
    {% set values = field.conditions.values|join('|') %}

    {% if field.conditions.any is not empty and 'notIn' != field.conditions.expr %}
        {% set values = '*' %}
    {% endif %}

    {% set containerAttributes = containerAttributes|merge({
        'data-mautic-form-show-on': fields[field.parent].alias ~ ':' ~ values,
        'data-mautic-form-expr': field.conditions.expr,
        'class': containerAttributes.class|merge([
            'mauticform-field-hidden',
        ]),
    }) %}
{% endif %}


{# Field is required #}
{% if field.isRequired is defined and field.isRequired %}
    {% set required = true %}
    {% set validationMessage = field.validationMessage %}
    {% if validationMessage is empty %}
        {% set validationMessage = 'mautic.form.field.generic.required'|trans([], 'validators') %}
    {% endif %}
    {% set containerAttributes = containerAttributes|merge({
        'class': containerAttributes.class|default([])|merge([
            'mauticform-required',
        ]),
        'data-validate': field.alias,
        'data-validation-type': field.type,
    }) %}
    {% if field.properties.multiple is defined and field.properties.multiple is not empty %}
        {% set containerAttributes = containerAttributes|merge({
            'data-validate-multiple': 'true',
        }) %}
    {% endif %}
{% elseif required is defined and true == required %}
    {# Forced to be required #}
    {% set containerAttributes = containerAttributes|merge({
        'class': containerAttributes.class|default([])|merge([
            'mauticform-required',
        ]),
    }) %}
{% endif %}
{# end: field_helper #}

{% set action = app.request.get('objectAction') %}
{% set settings = field.properties %}

{% set integrations = [] %}
{% if settings.integrations is defined and settings.integrations is not empty %}
    {% set integrations = settings.integrations[0:-1]|split(',') %}
{% endif %}

{% set formName = formName|replace({'_': ''})|default('mauticform') %}

{% block recaptcha %}
    {% set version = field.customParameters.version %}
    {% set siteKey = field.customParameters.site_key %}

    {% if field.showLabel %}
        <label {% for attrName, attrValue in labelAttributes %}{{ attrName }}="{% if attrValue is iterable %}{{ attrValue|join(' ') }}{% else %}{{ attrValue }}{% endif %}"{% endfor %}>
            {{ field.label }}
        </label>
    {% endif %}

    <script type="text/javascript">
        function verifyCallback_{{ formName }}(response) {
            document.getElementById("mauticform_input_{{ formName }}_{{ field.alias }}").value = response;
        }

        function onLoad_{{ formName }}() {
            grecaptcha.execute("{{ siteKey }}", {action: "form"}).then(function(token) {
                verifyCallback_{{ formName }}(token);
            });
        }
    </script>

    {% if field.properties.explicitConsent %}
        <script>
            function acceptCookieNotice(checkbox) {
                if(!checkbox.checked)
                    return

                checkbox.disabled = true;

                const captchaRequestElement = document.getElementById("provider");

                if(!captchaRequestElement)
                    return;

                const googleReCaptcha = document.createElement("script");

                const sources = {
                    "v2": "https://www.google.com/recaptcha/api.js",
                    "v3": "https://www.google.com/recaptcha/api.js?render={{ siteKey }}&onload=onLoad_{{ formName }}"
                };

                googleReCaptcha.src = sources.{{ version }};

                captchaRequestElement.innerHTML = "";

                captchaRequestElement.appendChild(googleReCaptcha);
            }
        </script>

        <div style="display:flex">
            <input id="recaptchaCheck"
                   name="recaptchaCheck"
                   type="checkbox"
                   style="margin-right:1rem"
                   onchange="acceptCookieNotice(this);" />

            <label for="recaptchaCheck">
                {{ field.customParameters.stringBag["accept_cookies"] }}<br />
                <strong>{{ field.customParameters.stringBag["accept_cookies.notice"] }}:</strong> {{ field.customParameters.stringBag["accept_cookies.notice.value"] }}
            </label>
        </div>

        <div id="provider"></div>
    {% else %}
        {% if version == "v2" %}
            <script src="https://www.google.com/recaptcha/api.js"></script>
        {% else %}
            <script src="https://www.google.com/recaptcha/api.js?render={{ siteKey }}&onload=onLoad_{{ formName }}"></script>
        {% endif %}
    {% endif %}

    <div {% for attrName, attrValue in containerAttributes %}{{ attrName }}="{% if attrValue is iterable %}{{ attrValue|join(' ') }}{% else %}{{ attrValue }}{% endif %}"{% endfor %}>
        <div style="position: relative; top:25px; padding-bottom:25px">
            <span class="mauticform-errormsg" style="display: none;"></span>
        </div>

        {% if version == 'v2' %}
            <div class="g-recaptcha"
                 data-sitekey="{{ siteKey }}"
                 data-callback="verifyCallback_{{ formName }}">
            </div>
        {% endif %}

        <input type="hidden"
               {% for attrName, attrValue in inputAttributes %}{{ attrName }}="{% if attrValue is iterable %}{{ attrValue|join(' ') }}{% else %}{{ attrValue }}{% endif %}"{% endfor %}>
    </div>
{% endblock %}
